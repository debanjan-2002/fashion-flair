# -*- coding: utf-8 -*-
"""fileGpt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jI4hwBctuTJpwpg2IfFxXUBDIJpN2M6z
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# pip install openai chromadb langchain tiktoken
# export OPENAI_API_KEY="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"

import os
import sys
from langchain.document_loaders.csv_loader import CSVLoader
from langchain.indexes import VectorstoreIndexCreator

os.environ["OPENAI_API_KEY"] = "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"

query = input("Question: ")
loader = CSVLoader(file_path='output_data.csv')
data = loader.load()
# rate limiting
index = VectorstoreIndexCreator().from_loaders([loader])
print(index.query(query))

# splitting data into chunks

from langchain.text_splitter import RecursiveCharacterTextSplitter
text_splitter = RecursiveCharacterTextSplitter(chunk_size = 500, chunk_overlap = 0)
all_splits = text_splitter.split_documents(data)



# storing data for future use

# from langchain.embeddings import OpenAIEmbeddings
# from langchain.vectorstores import Chroma

# vectorstore = Chroma.from_documents(documents=all_splits, embedding=OpenAIEmbeddings())

from langchain.retrievers import SVMRetriever
from langchain.embeddings import OpenAIEmbeddings

svm_retriever = SVMRetriever.from_documents(all_splits,OpenAIEmbeddings())

# generate answer

from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate

template = """
{context}
You are a fashion recommender, providing personalized outfit suggestions based on user preferences. Take into account the user's gender, favorite colors, preferred styles, and any specific clothing items they mention. You have access to the following catalog of fashion products. Your task is to recommend outfits using these items. Make sure to only provide suggestions from the catelog.
You will have to provide the response strictly in JSON format which will have the following properties -
response: "your recommendations",
image url : "paste the list of urls here"
"""

question="Suggest me some track-pants"
QA_CHAIN_PROMPT = PromptTemplate.from_template(template)

llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=1)
qa_chain = RetrievalQA.from_chain_type(
    llm,
    retriever=svm_retriever,
    chain_type_kwargs={"prompt": QA_CHAIN_PROMPT}
)
result = qa_chain({"query": question})
result["result"]
print(result["result"])